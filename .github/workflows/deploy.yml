name: Deploy to GitHub Pages

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "deploy" to confirm deployment'
        required: true
        default: ''

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Check confirmation
        if: github.event.inputs.confirm != 'deploy'
        run: |
          echo "You must type 'deploy' to confirm deployment"
          exit 1

  build:
    needs: check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Debug repository content
        run: |
          echo "=== Repository Structure ==="
          ls -la
          echo "=== Seasons Directory ==="
          ls -la seasons/ || echo "Seasons directory not found"
          echo "=== Available Season Folders ==="
          ls -la seasons/*/ || echo "No season folders found"

      - name: Find latest season number
        id: find-latest
        run: |
          if [ -d "seasons" ]; then
            latest=$(ls seasons | grep 'season' | sed 's/season//' | sort -n | tail -n 1)
            if [ -z "$latest" ]; then
              echo "No seasons found in directory"
              latest=1  # Default to 1 if no seasons are found
            fi
          else
            echo "Seasons directory not found"
            latest=1  # Default to 1 if seasons directory doesn't exist
          fi
          echo "Latest season: $latest"
          echo "latest_season=$latest" >> $GITHUB_OUTPUT

      - name: Display debug info
        run: |
          echo "Latest season number: ${{ steps.find-latest.outputs.latest_season }}"
          echo "Current directory: $(pwd)"
          echo "Index.html exists: $(test -f index.html && echo 'Yes' || echo 'No')"
          echo "Seasons-data.json exists: $(test -f seasons-data.json && echo 'Yes' || echo 'No')"

      - name: Build site structure
        run: |
          # Create clean deployment directory
          mkdir -p _site
          
          # STEP 1: Create the simple redirect at the root
          echo "Creating root redirect..."
          cat index.html > _site/index.html
          
          # Copy seasons-data.json to the root and archive
          cp seasons-data.json _site/
          
          # Copy debug.html if it exists
          cp debug.html _site/ 2>/dev/null || echo "No debug.html file"
          
          # Create .nojekyll file to disable Jekyll processing
          touch _site/.nojekyll
          
          # STEP 2: Create archive structure - ONLY include the HTML/CSS/JS files, not the season content
          echo "Setting up archive..."
          mkdir -p _site/archive
          # Only copy the HTML, CSS, JS files from archive, not seasons
          find archive -maxdepth 1 -type f | grep -E "\.html$|\.css$|\.js$" | xargs -I{} cp {} _site/archive/
          cp seasons-data.json _site/archive/
          
          # STEP 3: Copy the seasons directory to the root level - this is the only copy we'll maintain
          echo "Setting up seasons at root level..."
          mkdir -p _site/seasons
          cp -r seasons/* _site/seasons/
          
          # STEP 4: List what we've built
          echo "=== Site Structure ==="
          find _site -type f | sort

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
