name: Build and Deploy to GitHub Pages

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "deploy" to confirm deployment'
        required: true
        default: ''

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Check confirmation
        if: github.event.inputs.confirm != 'deploy'
        run: |
          echo "You must type 'deploy' to confirm deployment"
          exit 1

  build:
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Find latest season number
        id: find-latest
        run: |
          latest=$(ls seasons | grep 'season' | sed 's/season//' | sort -n | tail -n 1)
          echo "latest_season=$latest" >> $GITHUB_OUTPUT
          echo "Latest season is $latest"
          
      - name: Create GitHub Pages structure
        run: |
          # Create deployment directory
          mkdir -p _site
          
          # First, copy the root files that should be at the site root
          cp index.html _site/
          cp seasons-data.json _site/
          
          # Now, copy the latest season content to the root
          # BUT don't overwrite index.html that we just copied
          find seasons/season${{ steps.find-latest.outputs.latest_season }} -type f | grep -v "index.html" | xargs -I{} cp {} _site/
          
          # Create necessary directories and copy folders
          mkdir -p _site/images
          if [ -d "seasons/season${{ steps.find-latest.outputs.latest_season }}/images" ]; then
            cp -r seasons/season${{ steps.find-latest.outputs.latest_season }}/images/* _site/images/
          fi
          
          # Create archive directory
          mkdir -p _site/archive
          
          # Copy archive HTML, CSS and JS
          cp -r archive/* _site/archive/
          
          # Create seasons directory inside archive
          mkdir -p _site/archive/seasons
          
          # Copy all seasons to archive/seasons
          cp -r seasons/* _site/archive/seasons/
          
          # Copy seasons data JSON to archive
          cp seasons-data.json _site/archive/
          
          # Create .nojekyll file to disable Jekyll processing
          touch _site/.nojekyll
          
          # List the directory structure for debugging
          echo "Site structure:"
          find _site -type f | grep -v "/_" | sort

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
